package pluginBuildSolution.plugin;

/*Generated by MPS */

import jetbrains.mps.workbench.action.BaseAction;
import javax.swing.Icon;
import com.intellij.openapi.actionSystem.AnActionEvent;
import java.util.Map;
import java.awt.Frame;
import jetbrains.mps.ide.actions.MPSCommonDataKeys;
import jetbrains.mps.project.MPSProject;
import org.jetbrains.annotations.NotNull;
import java.nio.file.Path;
import java.nio.file.Paths;
import org.rascalmpl.library.Rascal2MPS;
import javax.swing.JOptionPane;
import io.usethesource.vallang.IConstructor;

public class TestAction_Action extends BaseAction {
  private static final Icon ICON = null;

  public TestAction_Action() {
    super("Test Plugin", "test the plugin", ICON);
    this.setIsAlwaysVisible(true);
    this.setExecuteOutsideCommand(false);
  }
  @Override
  public boolean isDumbAware() {
    return true;
  }
  @Override
  protected boolean collectActionData(AnActionEvent event, final Map<String, Object> _params) {
    if (!(super.collectActionData(event, _params))) {
      return false;
    }
    {
      Frame p = event.getData(MPSCommonDataKeys.FRAME);
      if (p == null) {
        return false;
      }
    }
    {
      MPSProject p = event.getData(MPSCommonDataKeys.MPS_PROJECT);
      if (p == null) {
        return false;
      }
    }
    return true;
  }
  @Override
  public void doExecute(@NotNull final AnActionEvent event, final Map<String, Object> _params) {
    TestAction_Action.this.testExternal(event);
  }
  /*package*/ void testExternal(final AnActionEvent event) {
    Path p = Paths.get("C:\\Dev\\RascalExample\\src");
    Rascal2MPS m = new Rascal2MPS();
    JOptionPane.showMessageDialog(event.getData(MPSCommonDataKeys.FRAME), p.toUri().toString());
    IConstructor rascalAST = m.getAST(p.toUri().toString(), "Abstract", "EXP");

  }
}
